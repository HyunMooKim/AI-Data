# -*- coding: utf-8 -*-
"""다중회귀분석.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X07pjl04dFbvQDUZrCPQaBUBnQs108Tp

#회귀분석 전체 모델
"""

import pandas as pd 
import numpy as np
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression

#기본회귀분석
#전체 변수 "WTI","GAS","FED rate","CPI","DGS10","dollar","S&P500","goldETF", "gold spot", "silver","gold mining","VIX","CRB"
#VIF로 줄인 변수 "FED rate","DGS10","S&P500","goldETF" 
#그레인져 통과한 변수: DGS10(lag123), goldETF(2,3), S&P500(lag2) , real_estate(6)
#후보1 "WTI","DGS10","S&P500","goldETF" - VIF? 나쁘지 않아   설명력 0.7  그레인져: gold ETF
#후보2 "WTI","DGS10","goldETF","real_estate" vif는 좀 큼   설명력 0.811, 그레인져: ETF, real_estate
#후보3 "WTI","DGS10","S&P500", "goldETF"      설명력 0.776
#후보4 "WTI","DGS10", "S&P500", "goldETF","VIX"
#후보5 DGS10", "S&P500", "goldETF","CRB","VIX","WTI
#데이터 불러오기
gold = pd.read_excel("regression.xlsx")
#gold_data = gold.drop(['gold future'], axis=1)

#분석 변수 설정: 독립-종속
x_data = gold[ [ "DGS10","S&P500","VIX","CRB","goldETF"]] ###엑셀과 같은 회귀분석 변수 넣는 곳###
target = gold[["gold spot"]] #종속

# for b0, 상수항 추가
x_data1 = sm.add_constant(x_data, has_constant = "add")

# OLS 검정
multi_model = sm.OLS(target, x_data1)
fitted_multi_model = multi_model.fit()
print(fitted_multi_model.summary())


## 예측해보기 
fitted_multi_model  = LinearRegression()
fitted_multi_model.fit(x_data, target) 
my_predict = [[4,0,0,0,0]]     
fitted_multi_model.predict(my_predict)
print(float(fitted_multi_model.predict(my_predict)))

## 예측해보기 
fitted_multi_model  = LinearRegression()
fitted_multi_model.fit(x_data, target) 

max = -1
min = 1000000000000
for i in range( 16, 19): #DGS10
  for j in range(3450, 3751 ,150 ): #S&P
    for l in range(30, 37, 2): #VIX
      for m in range(275, 326, 25): #CRB
        for k in range(35000000,40000001,2500000): #ETF
          my_predict = [[i*0.25,j,l,m,k]]     
          x = float(fitted_multi_model.predict(my_predict))
          if( max <= x ):
            max = x
          if(min >= x ):
            min = x

print(max, min)

import pandas as pd 
import numpy as np
import statsmodels.api as sm
#처음 돌린 전체 변수 "WTI","GAS","FED rate","CPI","DGS10","dollar","S&P500","goldETF"
#VIF로 줄인 변수 "FED rate","DGS10","S&P500","goldETF" 

#2017년에서 끊기

#데이터 불러오기
gold = pd.read_excel("regression.xlsx")
#gold_data = gold.drop(['gold future'], axis=1)

##전처리 결측치 제거 ##
gold = gold.iloc[ : ,6 : ]
gold= gold.dropna(axis = 0)

#분석 변수 설정: 독립-종속
x_data = gold[["DGS10", "S&P500", "goldETF","CRB","VIX","WTI","gold mining"]] ###엑셀과 같은 회귀분석 변수 넣는 곳###
target = gold[["gold future"]] #종속

# for b0, 상수항 추가
x_data1 = sm.add_constant(x_data, has_constant = "add")

# OLS 검정
multi_model = sm.OLS(target, x_data1)
fitted_multi_model = multi_model.fit()
print(fitted_multi_model.summary())

"""#다중공선성 분석1 - 상관계수"""

data = gold[["DGS10","S&P500","VIX","CRB","goldETF"]]
# 상수항 추가
data_2 = sm.add_constant(data, has_constant = "add")

# 회귀모델 적합
multi_model2 = sm.OLS(target, data_2)
fitted_multi_model2 = multi_model2.fit()

# 결과 출력
fitted_multi_model2.summary()

data.corr()

"""#다중공선성 분석2 -VIF

"""

import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm;
from statsmodels.stats.outliers_influence import variance_inflation_factor

df = pd.read_excel('regression.xlsx')

###엑셀과 다른 회귀분석##
#처음 돌린 전체 변수 "WTI","GAS","FED rate","CPI","DGS10","dollar","S&P500","goldETF"
df['intercept'] = 1
model = sm.OLS(df['gold spot'], df[["DGS10","S&P500","VIX","CRB","goldETF"]])###유리한 회귀분석 변수 넣는 곳###
results = model.fit()
print(results.summary())

###VIF 검사  ###  
X_train = df[["DGS10","S&P500","VIX","CRB","goldETF"]] ###VIF 변수 넣는 곳!###
vif = pd.DataFrame()
vif["VIF_Factor"] = [ variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]
vif["features"] = X_train.columns
vif

"""#그레인저 분석"""

import numpy as np
import pandas as pd
from statsmodels.tsa.stattools import grangercausalitytests

df = pd.read_excel('regression.xlsx')

'''  ##gold mining 할땐 이거 넣어야함
##전처리 결측치 제거 ##
df = gold.iloc[ : ,6 : ]
df= df.dropna(axis = 0)
'''
#perform Granger-Causality test

df= df.dropna(axis = 0)

for i in range(6,19):
  data = df.iloc[: , [20,i]]
  print()
  print()
  print()
  print(data.columns)
  grangercausalitytests(data, maxlag=[3])  ##뒤에가 독립변수 역할!  
  data = df.iloc[:, [i, 20]]
  grangercausalitytests(data, maxlag=[3])  ##maxlag => [7] 이렇게하면 7 하나만,  그냥 7 넣으면 1부터 7까지 다 나옴

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import grangercausalitytests
  
df = pd.read_excel('regression.xlsx')
t1=df['WTI'] ## 변수1 넣기
t2=df['gold future']      ## 변수2 넣기
df_s = pd.DataFrame(columns=['WTI','gold future'], data=zip(t1,t2))  ##변수 넣는곳
gc_res = grangercausalitytests(df_s,5)

"""#그래프 분석"""

import matplotlib.pyplot as plt

## 두 변수 간의 관계

plt.figure(figsize = (10, 5)) 
gold.plot(kind = 'scatter', x='time', y='goldETF') #어차피 x y 를 지정해줄 것이기 때문에, 별도의 추출 필요 없다. 

plt.title('scatter plot')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']
y1 = df['CPI']
y2 = df['gold spot']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('CPI', color='tab:red', fontsize=20)
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("gold spot", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']
y1 = df['real_estate']
y2 = df['gold spot']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('real_estate', color='tab:red', fontsize=20)
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("gold spot", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df.iloc[ :96 ,0]
y1 = df.iloc[ :96 ,16]
y2 = df.iloc[ :96 ,20]

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('gold mining', color='tab:red', fontsize=20)
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("gold spot", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']
y1 = df['WTI']
y2 = df['gold future']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('WTI', color='tab:red', fontsize=20)
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("gold future", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']
y1 = df['dollar']
y2 = df['gold future']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('dollar', color='tab:red', fontsize=20)
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("gold future", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']
y1 = df['VIX']
y2 = df['CRB']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('VIX', color='tab:red', fontsize=20)
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("CRB", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']
y1 = df['S&P500'] 
y2 = df['goldETF']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)
ax1.plot(x, y1, color='tab:red')

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')

# Decorations
# ax1 (left Y axis)
ax1.set_xlabel('Time', fontsize=20)
ax1.tick_params(axis='x', rotation=0, labelsize=12)
ax1.set_ylabel('S&P500', color='tab:red', fontsize=20) ## 이름
ax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )
ax1.grid(alpha=.4)

# ax2 (right Y axis)
ax2.set_ylabel("gold ETF", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


##시간에 따라 변하는 두 변수 

df = pd.read_excel("regression.xlsx")

##변수 넣는 곳!!##
x = df['time']

y2 = df['goldETF']

# Plot Line1 (Left Y Axis)
fig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)

# Plot Line2 (Right Y Axis)
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax2.plot(x, y2, color='tab:blue')


# ax2 (right Y axis)
ax2.set_ylabel("goldETF", color='tab:blue', fontsize=20)
ax2.tick_params(axis='y', labelcolor='tab:blue')
ax2.set_xticks(np.arange(0, len(x), 60))
ax2.set_xticklabels(x[::60], rotation=90, fontdict={'fontsize':10})
ax2.set_title("Visualizing Leading Indicator Phenomenon", fontsize=22)
fig.tight_layout()
plt.show()